---
title: "Visualizing Segregation in DC"
date: 2023-11-27
categories: 
  - Urban Studies
  - GIS
  - Segregation
  - Inequality
aliases: ["/dc-segregation"]
format:
  html:
    df-print: kable
---

About ten years ago, Pew Research released an incredible set of maps visualizing how extreme segregation is in DC, race-wise as well as socioeconomic. A screenshot from this old set of visualizations shows what they used to look like:

![Pew's visualization of socioeconomic segregation in DC](images/dc_income.jpeg)

Unfortunately, all of these visualizations used MapBox, which seems to just totally not exist anymore (at least, these particular maps are long gone), so that when you try to [view these visualizations](https://www.pewresearch.org/social-trends/income-segregation/washington-dc/){target='_blank'} on Pew's website nowadays, you just get a blank page.

So, in this document, I recreate the above maps, using open-source libraries in Python to (hopefully) allow interactive visualization of this important information that will last longer than the previous versions in MapBox's proprietary format!

## Data Overview

The data behind these maps is somewhat hard to find, but in a strange way that is the opposite of most hard-to-find data cases: here there are so many *different* data sources for income across the "DC Metro Area" (the definition of this region, itself, being subject to different interpretations by different data sources), that I ran into the following tradeoff at the start:

* If we want data for **just** the District of Columbia itself, we can obtain <a href='https://gist.github.com/jpowerj/880fb251add1c7d414bd758c77038c35' target='_blank'>very easy-to-use data</a> directly from the DC government's data portal, which is ready for immediate use in the sense that we can plug it into a mapping app and see the data without any need to tweak any settings! Clicking that link, for example, will show a preview of the map directly within the GitHub page! While the GitHub preview won't show the income data for each tract, this <a href='http://geojson.io/#data=data:text/x-url,https%3A%2F%2Fgist.githubusercontent.com%2Fjpowerj%2F880fb251add1c7d414bd758c77038c35%2Fraw%2F6037e33f7920e959fff862fe394407f0b3e6cae2%2Fdc.geojson' target='_blank'>geojson.io</a> link (with the URL just pointing to that GitHub page) will! 
* Similarly, if we want data for **just** Maryland or **just** Virginia, we could obtain fairly easy-to-use geoJSON files from these states' data portals
* But, if we want data for the **DC Metro Area**, allowing **apples-to-apples comparisons** between (for example) census tracts within DC and in the Maryland suburbs, then we run into a bit of an issue since the relevant US Census data is far less ready-for-use in its raw form.

## IPUMS Data: Median Income by Census Tract

First we load the data, which contains median household income for *all* census tracts in the US:

```{python}
#| label: load-tract-data
import pandas as pd
ipums_df = pd.read_csv("assets/nhgis0001_ds254_20215_tract.csv", encoding_errors='ignore')
ipums_df.head()
```

We can get a sense of how many Census Tracts there are across different states, before we restrict ourselves to just the DMV:

```{python}
#| label: install-itables
# Here you can uncomment the following to install itables,
# if it is not already installed in your environment!
# We just use this to display nice HTML tables with pagination,
# so it's optional and you don't need to worry if it
# fails to install for whatever reason.
#!pip install itables
```

```{python}
#| label: tract-counts
from itables import show
tract_counts = ipums_df['STUSAB'].value_counts().to_frame().reset_index()
show(tract_counts)
```

But now we can restrict our analysis to just DC, Maryland, and Virginia:

```{python}
#| label: select-dmv-states
states_to_include = [
    'District of Columbia',
    'Maryland',
    'Virginia'
]
dmv_df = ipums_df[ipums_df['STATE'].isin(states_to_include)].copy()
```

And we can look at the 153 unique values that are listed in the "County" field for these states, where you'll see that this corresponds not only to "counties" in the standard colloquial sense but also to areas that have not been *incorporated* into any counties: places like Alexandria city:

```{python}
#| label: county-counts
county_counts = dmv_df['COUNTY'].value_counts(dropna=False)
show(county_counts)
```

Going through these unique values, I select the areas that seemed to be included in Pew's "DC Metro Area" map:

```{python}
#| label: select-counties
counties = [
    'Fairfax County', # 274 tracts
    'Montgomery County', # 255 tracts
    "Prince George's County", # 214 tracts
    'District of Columbia', # 206 tracts
    'Arlington County', # 71 tracts
    'Alexandria city', # 48 tracts
    'Fairfax city', # 5 tracts
    'Falls Church city', # 3 tracts
]
dmv_df = dmv_df[dmv_df['COUNTY'].isin(counties)].copy()
```

And now, since we're about to merge this data with the **shapefiles** for Maryland, DC, and Virginia, which have a `GEOID` field of type `string`, we'll need to create a string version of the `TL_GEO_ID` variable from IPUMS, for merging:

```{python}
#| label: geo-id-to-string
# String version for merging
dmv_df['TL_GEO_ID_str'] = dmv_df['TL_GEO_ID'].apply(str)
```

## TIGER Shapefiles for DC, Maryland, and Virginia

Next we'll load the TIGER shapefiles provided by the Census website, for DC (FIPS code 11), Maryland (FIPS code 24), and Virginia (FIPS code 51).

Here we use the amazing GeoPandas library, which essentially lets us keep using Pandas as we've been using it, but also maintains a GIS representation of the data "under the hood", so that when we're ready to plot our data we can plug the GeoDataFrame object into (for example) Plotly or any other data visualization library that supports mapping!

```{python}
#| label: install-geopandas
# Uncomment the following to install geopandas, if it is
# not already installed in your environment!
#!pip install geopandas
```

```{python}
#| label: load-shapefiles
import geopandas as gpd
# Shapefiles
dc_shape_df = gpd.read_file("assets/tl_2021_11_tract/tl_2021_11_tract.shp")
md_shape_df = gpd.read_file("assets/tl_2021_24_tract/tl_2021_24_tract.shp")
va_shape_df = gpd.read_file("assets/tl_2021_51_tract/tl_2021_51_tract.shp")
dmv_shape_df = pd.concat([dc_shape_df,md_shape_df,va_shape_df], ignore_index=True)
```

Now, since our original `dmv_df` and the GeoPandas-managed `dmv_shape_df` both have `GEO_ID` variables (with slightly different names), we can merge them into a single `DataFrame` and then tell GeoPandas to track **all** of this information!

```{python}
#| label: merge-data-with-shapes
geo_df_pd = pd.merge(dmv_df, dmv_shape_df, left_on='TL_GEO_ID_str', right_on='GEOID', how='left')
geo_df = gpd.GeoDataFrame(geo_df_pd)
geo_df.set_index('GEOID', inplace=True)
```

## Visualizing with Plotly

And now, finally, we can make use of Plotly's `Cloropethmapbox` object to create a **Cloropeth map** of the different income levels:

```{python}
#| label: install-plotly
# Uncomment the following to install Plotly, if it is not already
# installed on your machine!
#!pip install plotly
```

```{python}
#| label: cloropeth-map
import plotly.express as px
import plotly.io as pio
pio.renderers.default = "notebook"
median_income_var = "AOQIE001"
# Capitol Building
#capitol_lat = 38.889805
#capitol_lon = -77.009056
# White House
#center_lat = 38.8977
#center_lon = -77.0365
# Scott Statue
center_lat = 38.907278946266466
center_lon = -77.03651807332851

income_fig = px.choropleth_mapbox(
    geo_df,
    geojson=geo_df.geometry,
    locations=geo_df.index,
    #z=geo_df[median_income_var],
    color=median_income_var,
    #autocolorscale=True,
    opacity=0.7,
    mapbox_style='carto-positron',
    zoom = 10.4,
    center = {
        "lat": center_lat,
        "lon": center_lon,
    },
    # width=800,
    # height=800
)
income_fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
income_fig.show()
```

Notice anything? ...I feel like the raw median income distribution pretty much tells the whole story, but if we want to fully recreate the Pew maps, we could collapse these income levels down into (low, medium, high) using the <a href='assets/Rise-of-Residential-Income-Segregation-2012.2.pdf' target='_blank'>methodology from the report's appendix</a> to produce a map of categorical income levels. For 2021, the most recent year for which IPUMS had the 5-year ACS data, the median income for the DC metro area was <a href='https://www.statista.com/statistics/432876/us-metro-areas-by-median-household-income/' target='_blank'>$110,355</a> (for comparison, the **national** median household income was <a href='https://www.census.gov/library/publications/2022/demo/p60-276.html' target='_blank'>$70,784</a>), so that (letting $M$ represent this metro-area median)

* The cutoff for low-income (using Pew's methodology) is $\frac{2}{3}\cdot M$ = **$73,570**
* The cutoff for high-income (again using Pew's methodology) is $2M$ = **$220,710**

```{python}
#| label: cloropeth-map-categories
median_income_var = "AOQIE001"
# Capitol Building
#capitol_lat = 38.889805
#capitol_lon = -77.009056
# White House
center_lat = 38.8977
center_lon = -77.0365

# Here we'll drop NA, since Plotly doesn't handle
# NA values as well as NaN values
geo_df_nona = geo_df[~pd.isna(geo_df[median_income_var])].copy()
# Cutpoints
#natl_median = 70000
metro_median = 110355
low_cutoff = (2/3) * metro_median
high_cutoff = 2 * metro_median
def get_income_level(income):
    # If NA, we want to keep its category as NA
    if pd.isna(income):
        return pd.NA
    if income < low_cutoff:
        return "Low"
    if income > high_cutoff:
        return "High"
    return "Medium"
geo_df_nona['income_level'] = geo_df_nona[median_income_var].apply(get_income_level)
level_fig = px.choropleth_mapbox(geo_df_nona,
  geojson=geo_df_nona.geometry,
  color="income_level",
  locations=geo_df_nona.index,
  #featureidkey="properties.district",
  center={"lat": center_lat, "lon": center_lon},
  mapbox_style="carto-positron",
  hover_data=[median_income_var],
  zoom=10,
  color_discrete_map={
    'High': 'green',
    'Medium': 'lightgrey',
    'Low': 'red'
  }
)
level_fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
level_fig.show()
```

And *voila*! The pattern looks... even more bleak in 2021 than it did in 2012 😔
