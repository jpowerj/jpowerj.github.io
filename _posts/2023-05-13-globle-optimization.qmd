---
title: "Globle Optimization"
author: "Jeff Jacobs"
format:
  gfm:
    keep-yaml: true
    title: ""
    author: ""
    date: ""
    excerpt-separator: <!--more-->
    preview-mode: raw
#format:
#  html:
#    preserve_yaml: true
#editor: visual
date: "2023-05-13"
embed-resources: true
layout: post
#always_allow_html: true
df-print: kable
code-copy: true
#toc: true
---

```{r,setup=TRUE,echo=FALSE}
knitr::opts_knit$set(base.dir = "C:\\Dropbox\\jpowerj.github.io\\", base.url = "/")
knitr::opts_chunk$set(fig.path = "../assets/img/")
# And, how many to display, for the top N/bottom N part
disp_n <- 5
```

You may have heard of a geography came that came out during the Great Wordle Clone Wave of 2022, called [Globle](https://globle-game.com) --- if you haven't, go check it out! The idea is, you guess a country, and it gives you "hot or cold" feedback: the redder the country's land mass is highlighted, the closer you are to the country of the day. Their example is, if the mystery country is **Japan**, the following countries would appear with these colors if guessed:<!--more-->

|![](/assets/img/france.svg)| ![](/assets/img/nepal.svg) | ![](/assets/img/mongolia.svg) | ![](/assets/img/south_korea.svg) |
|:-:|:-:|:-:|:-:|
| **France** | **Nepal** | **Mongolia** | **South Korea** |

## The Optimization

With my overthink-everything brain, after a few days I decided I wanted to go and figure out the **OPTIMAL** first guess: this could be defined in a bunch of ways, but to me it boiled down to, which country is closest, on average, to *all* other countries in the world?

Like the definition of "optimal" here, the definition of "close" we use could massively change the results: should we say two countries are distance-zero from each other if their borders touch? What about exclaves like [Kaliningrad](https://en.wikipedia.org/wiki/Kaliningrad)? Or, even more chaotically, what about e.g. French *dÃ©partements* in entirely different continents[^drom], like [French Guiana](https://en.wikipedia.org/wiki/French_Guiana) in South America? Should we say that Suriname and Brazil are distance-zero from France?

Long story short, I was able to bunny-hop over these complexities by

* Deciding to use the **centroid** of each country as its "official" location, and
* Finding a data source which determined these centroids in a way that avoided them being skewed by overseas regions by defining a "main" landmass, and computing the centroid of that mass.

The second part is really the key here, as using the centroid of *all* the nation's territory could lead to France's centroid being somewhere in the Atlantic Ocean near the equator, while Denmark's would be somewhere a bit south of Iceland, halfway to [Greenland](https://en.wikipedia.org/wiki/Greenland).

## The Data

The dataset which met all of my requirements, and came in the form of a convenient R package, was the [CEPII GeoDist dataset](http://www.cepii.fr/CEPII/en/bdd_modele/bdd_modele_item.asp?id=6):

> GeoDist provides several geographical variables, in particular bilateral distances measured using city-level data to account for the geographic distribution of population inside each nation. Different measures of bilateral distances are available for 225 countries. For most of them, different calculations of "intra-national distances'' are also available.

At first I downloaded the `.dta` files from that link and transformed them into regular `.csv` files for use in `R`. Then I learned of their [R package](https://cran.r-project.org/web/packages/cepiigeodist/), `cepiigeodist`, which saved yet more time. By just loading this library (plus `tidyverse` to enable pipe operations, and `countrycode` which helps translate between different official ISO country codes):

```{r,load-cepii}
#| warning: false
library(cepiigeodist)
library(tidyverse)
library(countrycode)
```

You instantly have a variable called `dist_cepii` in your environment, containing pairwise distances (calculated a few different ways) between all countries[^vars]:

<div class="table-wrapper" markdown="block">

```{r,disp-cepii}
#| code-fold: true
# Keep only distance vars, plus ids
dists <- dist_cepii %>%
  select(iso_o, iso_d, smctry, dist, distcap, distw, distwces)
# Drop pairs that are the same country
dists <- dists %>%
  filter(smctry == 0) %>%
  filter(iso_o != iso_d)
# We don't need smctry anymore
dists <- dists %>%
  select(-smctry)
# Convert the weighted dists to floats
dists <- dists %>%
  mutate(distw_num = suppressWarnings(as.numeric(distw)))
dists %>% head(disp_n)
```

</div>

The `dist` and `distcap` columns are straightforward: the distances between the countries' centroids and capital cities, respectively. The weighted variables, `distw` and `distwcec`, are called "gravity-weighted" distances, which in this case means that the original distances are weighted "using city-level data to assess the geographic distribution of population (in 2004) inside each nation" (see [here](http://www.cepii.fr/PDF_PUB/wp/2011/wp2011-25.pdf) for full details).

After some basic cleaning---dropping some too-small countries with strange distance values and providing custom labels for six countries not included in the `countrycode` helper library, we get a version with readable country names:

<div class="table-wrapper" markdown="block">

```{r,clean-countries}
#| code-fold: true
#| warning: false
dists <- dists %>%
  mutate(
    country_o = countrycode(iso_o, origin='iso3c', destination='country.name'),
    country_d = countrycode(iso_d, origin='iso3c', destination='country.name')
  ) %>%
  select(country_o, country_d, everything())
code_map <- list(
  'ANT'='Netherlands Antilles',
  'PAL'='Palestine',
  'ROM'='Romania',
  'TMP'='East Timor',
  'YUG'='Yugoslavia',
  'ZAR'='Zaire'
)
#print(names(code_map))
for (code in names(code_map)) {
  #print(c(code, code_map[[code]]))
  dists[dists$iso_o == code, 'country_o'] <- code_map[[code]]
  dists[dists$iso_d == code, 'country_d'] <- code_map[[code]]
}
# Also dropping a few
dists <- dists %>%
  filter(country_o != "French Polynesia" & country_d != "French Polynesia") %>%
  filter(country_o != "Cook Islands" & country_d != "Cook Islands") %>%
  filter(country_o != "Pitcairn Islands" & country_d != "Pitcairn Islands")
dists %>% head(disp_n)
```

</div>

Finally, with a somewhat scary-looking single `dplyr` (piped) operation, we get our average distances for each country, using a few different ways of measuring "average":

<div class="table-wrapper" markdown="block">

```{r,compute-avg}
#| warning: FALSE
#| code-fold: true
mean_dists <- dists %>%
  group_by(country_o) %>%
  summarize(
    mean_dist = mean(dist),
    median_dist = median(dist),
    max_dist = max(dist),
    argmax_dist = country_d[which.max(dist)],
    min_dist = min(dist),
    argmin_dist = country_d[which.min(dist)],
    mean_distw = mean(distw_num, na.rm=TRUE),
    median_distw = median(distw_num, na.rm=TRUE),
    max_distw = max(distw_num, na.rm=TRUE),
    argmax_distw = country_d[which.max(distw_num)],
    p90_distw = quantile(distw_num, 0.9, na.rm=TRUE),
    min_distw = min(distw_num, na.rm=TRUE),
    argmin_distw = country_d[which.min(distw_num)],
    mean_distcap = mean(distcap),
    median_distcap = median(distcap),
    max_distcap = max(distcap),
    argmax_distcap = country_d[which.max(distcap)],
    min_distcap = min(distcap),
    argmin_distcap = country_d[which.min(distcap)]
  ) %>%
  rename(country=country_o)
#%>%
#  select(country_o, everything())
mean_dists %>% head(disp_n)
```

</div>

The `mean_dist`, `median_dist`, `max_dist`, and `min_dist` columns are self-explanatory, but `argmax_dist` tells us the country that is *furthest away* from a given country, while `argmin_dist` tells us the country that is *closest*. `p90_distw` tells us the 90th percentile of the `distw` measure between this country and all other countries (this is how I caught the strange distances for the countries we dropped in the previous step).

## The Results

Now that we have our average distances, we can get our result: the country that is closest, on average, to all other countries! Let's look at a few different ways of computing this average, starting with the **landmass centroid-based** measures:

### Mean of Distances

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,mean}
#| code-fold: true
sorted_mean <- mean_dists %>%
  arrange(mean_dist) %>%
  select(country, mean_dist, everything())
sorted_mean %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-bottom}
#| code-fold: true
sorted_mean %>% tail(disp_n)
```

</div>

### Median of Distances

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,median}
#| code-fold: true
sorted_median <- mean_dists %>%
  arrange(median_dist) %>%
  select(country, median_dist, everything())
sorted_median %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,median-bottom}
#| code-fold: true
sorted_median %>% tail(disp_n)
```

</div>

### Mean of Weighted Distances

(We need to drop NAs for the weighted measures)

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-distw}
#| code-fold: true
sorted_mean_distw <- mean_dists %>%
  arrange(mean_distw) %>%
  select(country, mean_distw, everything()) %>%
  drop_na(mean_distw)
sorted_mean_distw %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-distw-bottom}
#| code-fold: true
sorted_mean_distw %>% tail(disp_n)
```

</div>

### Median of Weighted Distances

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,median-distw}
#| code-fold: true
sorted_median_distw <- mean_dists %>%
  arrange(median_distw) %>%
  select(country, median_distw, everything()) %>%
  drop_na(median_distw)
sorted_median_distw %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,median-distw-bottom}
#| code-fold: true
sorted_median_distw %>% tail(disp_n)
```

</div>

### Half Weighted Mean, Half Weighted Median

I wasn't sure what to call this, and I don't think it should be used for important statistical analyses, but out of curiosity I tried to "balance" the sorted-by-weighted-mean and sorted-by-weighted-median results by computing the arithmetic mean of the two and sorting by this quantity.

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-median}
#| code-fold: true
sorted_meanmed_distw <- mean_dists %>%
  mutate(meanmed_distw = (mean_distw + median_distw)/2) %>%
  select(country, meanmed_distw, everything()) %>%
  drop_na(meanmed_distw) %>%
  arrange(meanmed_distw)
sorted_meanmed_distw %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-median-bottom}
#| code-fold: true
sorted_meanmed_distw %>% tail(disp_n)
```

</div>

## Capital Cities

Globle has a companion game, [Globle-Capitals](https://globle-capitals.com), that is just as fun! To find the optimal first guess for this game, we repeat the analysis but using the **location of the capital city**, rather than the centroid of the landmass, to represent each country. In our dataset, this just means using the `distcap` variable instead of the `dist` variable used above. We don't have to worry about weighted distances here, however, since the city is just located at one specific point (at least, its centroid is). So, using the aggregated `distcap` variables instead of the `dist`/`distw` variables used above, we obtain the results that follow:

### Mean of Capital Distances

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-capdist}
#| code-fold: true
sorted_meancap <- mean_dists %>%
  arrange(mean_distcap) %>%
  select(country, mean_distcap, everything())
sorted_meancap %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-capdist-bottom}
#| code-fold: true
sorted_meancap %>% tail(disp_n)
```

</div>

### Median of Capital Distances

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,median-capdist}
#| code-fold: true
sorted_mediancap <- mean_dists %>%
  arrange(median_distcap) %>%
  select(country, median_distcap, everything())
sorted_mediancap %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,median-capdist-bottom}
#| code-fold: true
sorted_mediancap %>% tail(disp_n)
```

</div>

### Half Median, Half Mean of Capital Distance

**Top 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-median-cap}
#| code-fold: true
sorted_meanmed_distcap <- mean_dists %>%
  mutate(meanmed_capdist = (mean_distcap + median_distcap)/2) %>%
  select(country, meanmed_capdist, everything()) %>%
  drop_na(meanmed_capdist) %>%
  arrange(meanmed_capdist)
sorted_meanmed_distcap %>% head(disp_n)
```

</div>

**Bottom 5:**

<div class="table-wrapper" markdown="block">

```{r,mean-median-cap-bottom}
#| code-fold: true
sorted_meanmed_distcap %>% tail(disp_n)
```

</div>

## The Takeaway

Given the pretty large tails of the distribution of distances for most countries (with the Pacific island nations, for example, having a few very close-by nations followed by a ton of extremely-far-away ones), I opted to go with the **median** distance as my determinant of the optimal first guess, as the measure least negatively affected by extremes in these distance distributions[^weighted]. And, since **Sudan** wins on this metric---for both the landmass centroid *and* the capital city location distances---I now use **Sudan** as my first guess when I launch my daily play of Globle, and **Khartoum** as my first guess for Globle-Capitals!

You can download the processed data, with the precomputed average distances, [here](/assets/data/country_dists.csv).

```{r,save-data}
#| code-fold: true
library(readr)
write_csv(mean_dists, "../assets/data/country_dists.csv")
```

[^drom]: Officially called [*dÃ©partements et rÃ©gions d'outre-mer*](https://en.wikipedia.org/wiki/Overseas_departments_and_regions_of_France) (DROM).

[^vars]: `dist_cepii` also has a bunch of interesting indicator variables: `contig`, `comlang_off`, `comlang_ethno`, `colony`, `comcol`, `curcol`, `col45`, and `smctry`, that we won't use here.

[^weighted]: For this game, since it's solely geography-based, we don't need to use the population-weighted distances---those were just for fun ð¤.